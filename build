#!/bin/bash

#check code error
# set -uo pipefail
# trap 's=$?; echo "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $s' ERR

clear
sudo pacman -Sy

#color
RED='\033[0;31m'
YELLOW='\033[0;93m'
BULE='\033[0;94m'
MAGENTA='\033[0;35m'
NC='\033[0m'

LOCAL_PATH=$(pwd)/arch-repo
CHROOT=$(pwd)/arch-root
REPO_NAME=koompi
PACKAGES=$(pwd)/aur-package/*
PACKAGE_LIST=$(pwd)/package-list

AUR_PACKAGE=$(pwd)/aur-package/

PACKAGE_UPDATE=$(pwd)/package-update
PACKAGE_BUILD_FAIL=$(pwd)/package-build-fail
PACKAGE_BUILD_SUCCESS=$(pwd)/package-build-scuess
PACKAGE_CHECKING=$(pwd)/package-checking
PACKAGE_BUILD_NEW=$(pwd)/package-build-new

rm -rf $PACKAGE_UPDATE 
rm -rf $PACKAGE_BUILD_FAIL 
rm -rf $PACKAGE_BUILD_SUCCESS
rm -rf $PACKAGE_CHECKING
rm -rf $PACKAGE_BUILD_NEW

touch $PACKAGE_UPDATE
touch $PACKAGE_BUILD_FAIL
touch $PACKAGE_BUILD_SUCCESS
touch $PACKAGE_CHECKING
touch $PACKAGE_BUILD_NEW

echo
echo -e "${YELLOW} Cloning...${NC}"
echo
#get name all aur package run this command: $ aur pkglist > package-list
#clone all aur repo
while read line; do
    cd $AUR_PACKAGE && git clone https://aur.archlinux.org/"$line".git
    echo -e "${YELLOW}==>>${NC} clone $line successfull"
done < $PACKAGE_LIST

#start build aur package
echo
echo -e "${YELLOW}Starting build...${NC}"
echo
for package in ${PACKAGES}; do 
    cd "$package" || (echo "No such directory: $package"; exit 1)

    #check git update in aur package
    namepkg=$(echo $package | awk -F"/" '{printf $7}')
    echo -e "${YELLOW}==>>${NC} Checking git pull on: ${MAGENTA}${namepkg}${NC}"
    PULL=$(git pull --ff-only)
    ALREADY="Already up to date."
    if [[ "$PULL" == "$ALREADY" ]] ;then
      echo -e "$YELLOW==>>$NC Package: ${MAGENTA}${namepkg}${NC} is ${BULE}${ALREADY}${NC}"
      PKGFIND=$(find *.pkg.tar.xz)
      PKGS=$(echo $PKGFIND | awk -F" " '{print $1}')

      #check aur package was build already
      if [[ -f $PKGS ]];then
        echo -e "${YELLOW}==>${NC} Package: ${MAGENTA}${PKGS}${NC} was build already."
        #add package that success build
        echo "$PKGS" >> $PACKAGE_BUILD_SUCCESS
        echo
      else 
        echo -e "${YELLOW}==>>${NC} Start build ${MAGENTA}${namepkg}${NC} first time."
        sudo -S makechrootpkg -cur "$CHROOT"

        PKGFIND=$(find ./*.pkg.tar.xz)
        PKGS=$(echo $PKGFIND | awk -F" " '{print $1}')

        #check if aur package build success
        if [[ -f $PKGS ]];then
          #add package that success build
          echo "$PKGS" >> $PACKAGE_BUILD_NEW
          echo "Syncing to database archpkg..."
          repo-add $(pwd)/local-repo/${REPO_NAME}.db.tar.xz ./*.pkg.tar.xz
        else 
          echo -e "${YELLOW}==>>${NC}${RED} Package: $namepkg build fail. ${NC}"
          echo "$namepkg" >> $PACKAGE_BUILD_FAIL
          updpkgsums 
        fi
      fi
    else
      echo -e "${YELLOW}==>>${NC} Git updated, Start build again."
      ls *.pkg.tar.xz > $PACKAGE_CHECKING
      sudo -S makechrootpkg -cur "$CHROOT"
      PKGOLD=$(cat $PACKAGE_CHECKING)
      PKGNEW=$(find *.pkg.tar.xz)
      if [[ -z $PKGNEW ]] ;then
        echo -e "${RED} Aur package build failed.${NC}"
        echo "$PKGOLD" >> $PACKAGE_BUILD_FAIL
      else
        #check aur package build success or not
        if [[ "$PKGOLD" != "$PKGNEW" ]] ;then
          echo "$BULE Aur package build sucess.$NC"
          echo "$PKGNEW" >> $PACKAGE_UPDATE
        else
          echo -e "$RED Aur package build failed.$NC"
          echo "$PKGOLD" >> $PACKAGE_BUILD_FAIL
        fi

      fi

    fi
done


COUNT1=$(wc -l $PACKAGE_BUILD_SUCCESS | awk -F" " '{printf $1}')
COUNT2=$(wc -l $PACKAGE_UPDATE | awk -F" " '{printf $1}')
COUNT3=$(wc -l $PACKAGE_BUILD_FAIL | awk -F" " '{printf $1}')
COUNT4=$(wc -l $PACKAGE_BUILD_NEW | awk -F" " '{printf $1}')


echo
echo -e "Package ${BULE}${COUNT1}${NC} was build already."
echo -e "package ${BULE}${COUNT4}${NC} build new."
echo -e "Package ${BULE}${COUNT2}${NC} was updated."
if [[ $COUNT3 == 0 ]] ;then
  echo -e "package ${BULE}${COUNT3}${NC} was failed."
else
  echo -e "package ${RED}${COUNT3}${NC} was failed."
fi
echo

##sync aur package after build to server
#rsync -av $PACKAGES/*.pkg.tar.xz username@[IP Address]:[location directory]

##sync db after add aur package to server
#rsync -av $(pwd)/local-repo/ username@[IP Address]:[localtion directory]